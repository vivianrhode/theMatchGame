{"ast":null,"code":"import React,{useState,useMemo,useCallback,useEffect}from'react';import'./Game.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const uppercaseLettersArray=Array.from({length:26},(_,i)=>String.fromCharCode(65+i));const lowercaseLettersArray=Array.from({length:26},(_,i)=>String.fromCharCode(97+i));function Game(_ref){let{clientGridSize,clientChooseType,clientnumbersRange,clientalphabetRange,clickOkbuttonReflash}=_ref;// ----------------如果传过来的是数字-------------------\nconst myMaxNumbers=Number(clientnumbersRange);//传过来的最大数字\nconst myMinNumbers=myMaxNumbers-10;//传过来的最小数字\nconst myRandomNumbers=myMaxNumbers-myMinNumbers+1;//传过来的数字范围的个数(包括最小数)\nconst halfGridSizeNumber=Number(clientGridSize)/2;//一半的总格数的数字\nconst allNumbers=useMemo(()=>Array.from({length:myRandomNumbers},(_,index)=>index+myMinNumbers),[myMinNumbers,myRandomNumbers]);//创建一个从最小值到最大值的数组\n//洗牌算法,将创建从最小值到最大值的数组的顺序打乱.\nconst shufflerArray=useCallback(array=>{const newArray=[...array];for(let i=newArray.length-1;i>0;i--){let j=Math.floor(Math.random()*(i+1));[newArray[i],newArray[j]]=[newArray[j],newArray[i]];}return newArray;},[]);// 因为不确定格子的个数,所以要做判断.如果总格子的一半>用户输入范围的数组长度.我们需要重新定义数组,从而确保数组的长度是等于总格子的一半.\nconst checkLength=useCallback((allNumbers,halfGridSizeNumbers)=>{if(halfGridSizeNumbers>allNumbers.length){// return generateRandomArray(allNumbers,halfGridSizeNumbers);\nlet newArray=[];while(newArray.length<halfGridSizeNumbers){const randomIndex=Math.floor(Math.random()*allNumbers.length);newArray.push(allNumbers[randomIndex]);}return newArray;}else{return allNumbers.slice(0,halfGridSizeNumber);}},[halfGridSizeNumber]);// 一下函数是对第一个数组进行复制,然后把两个数组融合成新的数组,然后在打乱顺序.\nconst fusionTwoArr=useCallback((allNumbers,halfGridSizeNumber)=>{const newLetterArr=checkLength(allNumbers,halfGridSizeNumber);const addTwoArrTogether=[...newLetterArr,...newLetterArr];// 直接复制一次\nreturn shufflerArray(addTwoArrTogether);},[halfGridSizeNumber,shufflerArray]);const bestArrays=useMemo(()=>{if(clientalphabetRange==='uppercase'){const uppercaseArray=checkLength(uppercaseLettersArray,halfGridSizeNumber);return fusionTwoArr(uppercaseArray);}else if(clientalphabetRange==='lowercase'){const lowercaseArray=checkLength(lowercaseLettersArray,halfGridSizeNumber);return fusionTwoArr(lowercaseArray);}else if(clientChooseType==='numbers'){const numbersArray=checkLength(allNumbers,halfGridSizeNumber);return fusionTwoArr(numbersArray);}},[clientalphabetRange,clientChooseType,fusionTwoArr,allNumbers,checkLength,halfGridSizeNumber]);// ----------------找到相同的,并且让相同项消失-------------------    \nconst[lastClick,setLastClick]=useState(null);const[hiddenElements,setHiddenElements]=useState({});const handleClick=(index,e)=>{const h2Context=e.target.parentElement.querySelector('h2').innerText;const contextContainer=e.target.parentElement;const clickElementIndex=contextContainer.parentElement.getAttribute('data-key');setHiddenElements(prevState=>{// 如果已经点击过，且文本相同但不是同一个元素\nif(lastClick&&lastClick.h2Context===h2Context&&lastClick.clickElementIndex!==clickElementIndex){return{...prevState,[clickElementIndex]:true,[lastClick.clickElementIndex]:true};}else{// 更新 lastClick 状态\nsetLastClick({h2Context,clickElementIndex});return prevState;}});};useEffect(()=>{// 初始化 hiddenElements 状态，使其对应于 bestArrays 的每个索引，并将每个元素设置为 false（即不隐藏）\nconst initialHiddenElements=bestArrays.reduce((acc,_,index)=>{acc[index]=false;// 初始化每个元素为不隐藏\nreturn acc;},{});setHiddenElements(initialHiddenElements);},[bestArrays,clickOkbuttonReflash]);// ----------------根据得到的clientGridSize,来决定游戏的grid-------------------   \nconst myGridStyle=Math.sqrt(clientGridSize);const mygridWidth=800/myGridStyle;return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"header\",{className:\"App-header\",children:/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:bestArrays.map((bestArray,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"cellContainer\",\"data-key\":index,onClick:event=>handleClick(index,event),style:{width:mygridWidth,height:mygridWidth},children:/*#__PURE__*/_jsxs(\"div\",{className:\"contextContainer\",style:{display:hiddenElements[index]?'none':'block'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"number_container\",children:/*#__PURE__*/_jsx(\"h2\",{children:bestArray})}),/*#__PURE__*/_jsx(\"div\",{className:\"color_cover_container\"})]})},index))})})});}export default Game;","map":{"version":3,"names":["React","useState","useMemo","useCallback","useEffect","jsx","_jsx","jsxs","_jsxs","uppercaseLettersArray","Array","from","length","_","i","String","fromCharCode","lowercaseLettersArray","Game","_ref","clientGridSize","clientChooseType","clientnumbersRange","clientalphabetRange","clickOkbuttonReflash","myMaxNumbers","Number","myMinNumbers","myRandomNumbers","halfGridSizeNumber","allNumbers","index","shufflerArray","array","newArray","j","Math","floor","random","checkLength","halfGridSizeNumbers","randomIndex","push","slice","fusionTwoArr","newLetterArr","addTwoArrTogether","bestArrays","uppercaseArray","lowercaseArray","numbersArray","lastClick","setLastClick","hiddenElements","setHiddenElements","handleClick","e","h2Context","target","parentElement","querySelector","innerText","contextContainer","clickElementIndex","getAttribute","prevState","initialHiddenElements","reduce","acc","myGridStyle","sqrt","mygridWidth","className","children","map","bestArray","onClick","event","style","width","height","display"],"sources":["/Users/youyirhode/Desktop/theMatchGame/src/Game.js"],"sourcesContent":["import React, { useState, useMemo, useCallback,useEffect} from 'react';\nimport './Game.css';\n        const uppercaseLettersArray = Array.from({length: 26}, (_, i) => String.fromCharCode(65 + i));\n        const lowercaseLettersArray = Array.from({length: 26}, (_, i) => String.fromCharCode(97 + i));\nfunction Game({clientGridSize,clientChooseType,clientnumbersRange,clientalphabetRange,clickOkbuttonReflash}) {\n    // ----------------如果传过来的是数字-------------------\n        const myMaxNumbers = Number(clientnumbersRange); //传过来的最大数字\n        const myMinNumbers = myMaxNumbers - 10;//传过来的最小数字\n        const myRandomNumbers = myMaxNumbers - myMinNumbers + 1;//传过来的数字范围的个数(包括最小数)\n        const halfGridSizeNumber = Number(clientGridSize) / 2;//一半的总格数的数字\n        const allNumbers = useMemo(()=>Array.from({length: myRandomNumbers}, (_, index)=>index + myMinNumbers ), [myMinNumbers, myRandomNumbers]) //创建一个从最小值到最大值的数组\n         //洗牌算法,将创建从最小值到最大值的数组的顺序打乱.\n            const shufflerArray = useCallback((array) => {\n                const newArray = [...array];\n                for (let i = newArray.length - 1; i > 0; i--) {\n                    let j = Math.floor(Math.random() * (i + 1));\n                    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n                }\n                return newArray;\n            }, []);\n\n          // 因为不确定格子的个数,所以要做判断.如果总格子的一半>用户输入范围的数组长度.我们需要重新定义数组,从而确保数组的长度是等于总格子的一半.\n            const checkLength = useCallback((allNumbers, halfGridSizeNumbers)=>{\n                if(halfGridSizeNumbers > allNumbers.length){\n                    // return generateRandomArray(allNumbers,halfGridSizeNumbers);\n                    let newArray = [];\n                    while (newArray.length < halfGridSizeNumbers) {\n                        const randomIndex = Math.floor(Math.random() * allNumbers.length);\n                        newArray.push(allNumbers[randomIndex]);\n                    }\n                    return newArray;\n                }else{\n                    return allNumbers.slice(0, halfGridSizeNumber);\n                }\n            },[halfGridSizeNumber]);\n\n        // 一下函数是对第一个数组进行复制,然后把两个数组融合成新的数组,然后在打乱顺序.\n            const fusionTwoArr = useCallback((allNumbers,halfGridSizeNumber) => {\n                const newLetterArr = checkLength(allNumbers,  halfGridSizeNumber );\n                const addTwoArrTogether = [...newLetterArr, ...newLetterArr]; // 直接复制一次\n                return shufflerArray(addTwoArrTogether);\n            }, [halfGridSizeNumber, shufflerArray]);\n        \n            const bestArrays = useMemo(() => {\n                if (clientalphabetRange === 'uppercase') {\n                    const uppercaseArray = checkLength(uppercaseLettersArray, halfGridSizeNumber);\n                    return fusionTwoArr(uppercaseArray );\n                } else if (clientalphabetRange === 'lowercase') {\n                    const lowercaseArray = checkLength(lowercaseLettersArray, halfGridSizeNumber);\n                    return fusionTwoArr(lowercaseArray);\n                } else if (clientChooseType === 'numbers') {\n                    const numbersArray = checkLength(allNumbers, halfGridSizeNumber);\n                    return fusionTwoArr(numbersArray);\n                }\n            }, [clientalphabetRange, clientChooseType, fusionTwoArr, allNumbers, checkLength, halfGridSizeNumber]);\n \n        // ----------------找到相同的,并且让相同项消失-------------------    \n        const[lastClick, setLastClick] = useState(null);\n        const [hiddenElements, setHiddenElements] = useState({});\n        const handleClick = (index, e) => {\n                const h2Context = e.target.parentElement.querySelector('h2').innerText;\n                const contextContainer = e.target.parentElement;\n                const clickElementIndex = contextContainer.parentElement.getAttribute('data-key');\n            setHiddenElements(prevState => {\n                // 如果已经点击过，且文本相同但不是同一个元素\n                if (lastClick && lastClick.h2Context === h2Context && lastClick.clickElementIndex !== clickElementIndex) {\n                    return { ...prevState, [clickElementIndex]: true, [lastClick.clickElementIndex]: true };\n                } else {\n                    // 更新 lastClick 状态\n                    setLastClick({ h2Context, clickElementIndex });\n                    return prevState;\n                }\n            });\n        };\n        useEffect(() => {\n            // 初始化 hiddenElements 状态，使其对应于 bestArrays 的每个索引，并将每个元素设置为 false（即不隐藏）\n            const initialHiddenElements = bestArrays.reduce((acc, _, index) => {\n              acc[index] = false; // 初始化每个元素为不隐藏\n              return acc;\n            }, {});\n          \n            setHiddenElements(initialHiddenElements);\n          }, [bestArrays,clickOkbuttonReflash]);\n\n        // ----------------根据得到的clientGridSize,来决定游戏的grid-------------------   \n\n        const myGridStyle = Math.sqrt(clientGridSize);\n        const mygridWidth = 800/ myGridStyle;\n        \n    \nreturn (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"container\" >\n            \n            {bestArrays.map( (bestArray,index) =>(\n                    <div className='cellContainer' \n                         key={index} \n                         data-key={index} \n                         onClick={(event) => handleClick(index,event)}\n                         style={{width:mygridWidth, height:mygridWidth }}\n                    >\n                        \n                          <div className='contextContainer' style={{ display: hiddenElements[index] ? 'none' : 'block' }}>\n                            <div className=\"number_container\"  >\n                                <h2>{bestArray}</h2>\n                            </div>\n                            <div className=\"color_cover_container\"></div>\n                            </div>\n                        </div>\n                )\n            )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}